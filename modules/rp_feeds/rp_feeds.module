<?php


/**
 * Implements hook_feeds_processor_targets_alter().
 */
function rp_feeds_feeds_processor_targets_alter(&$targets, $type, $bundle) {
  if ($type == 'node') {
    $targets['paragraph_basic_temp'] = array(
      'name' => t('Basic paragraph for field_s_paragraph'),
      'description' => t('If populated and host entity has a field_s_paragraph field, this value will be saved as a basic paragraph to this field'),
      'callback' => 'rp_feeds_feeds_paragraph_basic_set_target',
    );
  }
}
 
/**
 * Mapping callback for the "Basic paragraph for field_s_paragraph" target
 */
function rp_feeds_feeds_paragraph_basic_set_target($source, $entity, $target, $value, $mapping) {
  if (!empty($value[0])) {
    $entity->paragraph_basic_temp = rp_feeds_clean_html($value[0]);
  }
}
 
/**
 * Implements hook_node_insert().
 */
function rp_feeds_node_insert($node) {
  // If the node is being created and has a paragraph_basic_temp value from Feeds,
  // create and attach a new paragraph entity
  if (isset($node->paragraph_basic_temp)) {
    rp_feeds_create_attach_field_s_paragraph_basic_paragraph($node, $node->paragraph_basic_temp);
  }
}
 
/**
 * Implements hook_node_update().
 */
function rp_feeds_node_update($node) {
  // If the node is being updated and has a paragraph_basic_temp value from Feeds, process it
  if (isset($node->paragraph_basic_temp)) {
    $node_wrapper = entity_metadata_wrapper('node', $node);
 
    // If there are paragraphs, and the first one is a paragraph_basic, then update it
    if (!empty($node_wrapper->field_s_paragraph[0])) {
      if ($node_wrapper->field_s_paragraph[0]->getBundle() == 'paragraph_basic') {
        $old_value = $node_wrapper->field_s_paragraph[0]->field_para_body->value();
        if ($old_value['value'] != $node->paragraph_basic_temp) {
          $node_wrapper->field_s_paragraph[0]->field_para_body->set(array(
            'value' => $node->paragraph_basic_temp,
            'format' => 'full_html',
          ));
          $node_wrapper->field_s_paragraph[0]->save();
        }
      }
    }
    else {
      // We have paragraph_basic_temp data we need to use, so create and attach a new paragraph entity
      rp_feeds_create_attach_field_s_paragraph_basic_paragraph($node, $node->paragraph_basic_temp);
    }
  }
}
 
/**
 * Creates a new basic paragraph entity and attaches it to field_s_paragraph
 *
 * @param object $node
 *   Node to attach the paragraph entity to
 * @param string $content
 *   Content for the entity
 */
function rp_feeds_create_attach_field_s_paragraph_basic_paragraph($node, $content) {
  // Create a new "Basic paragraph" paragraph item
  $paragraph = entity_create('paragraphs_item', array(
      'field_name' => 'field_s_paragraph',
      'bundle' => 'paragraph_basic')
  );
  $paragraph->field_para_body[$node->language][0] = array(
    'value' => $content,
    'format' => 'full_html',
  );
  $paragraph->setHostEntity('node', $node);
  $paragraph->save(TRUE);
 
  // Add the new paragraph item to the parent node
  $node->field_s_paragraph[$node->language][0] = array(
    'value' => $paragraph->item_id,
    'revision_id' => $paragraph->revision_id
  );
  field_attach_update('node', $node);
}
 
/**
 * Cleans up HTML (probably not the most robust code, but it'll do)
 *
 * @param string $html
 *   HTML to cleanup
 *
 * @return string
 *   Cleaned HTML
 */
function rp_feeds_clean_html($html) {
  $html = str_replace("\n", ' ', $html);
  $html = str_replace('<b>', '<strong>', $html);
  $html = str_replace('</b>', '</strong>', $html);
 
  $replacement = '';
  $patterns = array(
    '/<p>[  ]*<\/p>[  ]*/i', // These look like two spaces, but one is character 160
  );
 
  $html = preg_replace($patterns, $replacement, $html);
 
  return $html;
}